package internal

import (
	"fmt"
	"github.com/danieljoos/wincred"
	c "github.com/fatih/color"
	"github.com/olekukonko/tablewriter"
	uuid "github.com/satori/go.uuid"
	"os"
	"strings"
	"time"
)

var Opts Commands
var client = newClient()

type Commands struct {
	List       ListSubCommands       `command:"list" description:"list all files in fse server"`
	Upload     UploadSubCommands     `command:"upload" description:"upload file(s) to fse server"`
	Download   DownloadSubCommands   `command:"download" description:"download file(s) from fse server"`
	Delete     DeleteSubCommands     `command:"delete" description:"delete file(s) in fse server"`
	Connection ConnectionSubCommands `command:"conn" description:"manage fse server connections"`
	Version    VersionSubCommands    `command:"version" description:"print client build version"`
}

type BaseCommand struct {
	Conn string `short:"c" long:"conn" description:"specify which fse server connection to use"`
	Cwd  string `long:"cwd" description:"set current work directory" required:"false"`
}

type ListSubCommands struct {
	BaseCommand
}

type UploadSubCommands struct {
	BaseCommand
}

type DownloadSubCommands struct {
	BaseCommand
}

type DeleteSubCommands struct {
	BaseCommand
}

type ConnectionSubCommands struct {
	List   ConnectionListSubCommands   `command:"ls"`
	Add    ConnectionAddSubCommands    `command:"add"`
	Remove ConnectionRemoveSubCommands `command:"rm"`
}

type ConnectionListSubCommands struct {
}

type ConnectionAddSubCommands struct {
	Name       string `short:"n" long:"name" description:"connection name" required:"false"`
	ServerAddr string `short:"s" long:"server" description:"fse server address (example: localhost:9330)"`
	Token      string `short:"t" long:"token" description:"access token generated by fse server"`
}

type ConnectionRemoveSubCommands struct {
	Name string `short:"n" long:"name" description:"connection name"`
}

type VersionSubCommands struct {
}

type ConnectionInfo struct {
	ServerAddr string
	Token      string
}

func (l *ListSubCommands) Execute(args []string) error {
	if err := login(); err != nil {
		return err
	}
	return nil
}

func (u *UploadSubCommands) Execute(args []string) error {
	if err := login(); err != nil {
		return err
	}
	return nil
}

func (d *DownloadSubCommands) Execute(args []string) error {
	if err := login(); err != nil {
		return err
	}
	return nil
}

func (d *DeleteSubCommands) Execute(args []string) error {
	if err := login(); err != nil {
		return err
	}
	return nil
}

func login() error {
	//if conn, err := getConnectionInfo(l.Conn); err != nil {
	//	return err
	//} else {
	//	client.login(conn.ServerAddr, conn.Token)
	//}
	return nil
}

func getConnectionInfo(name string) (*ConnectionInfo, error) {
	cred, err := wincred.GetGenericCredential(name)
	if err != nil {
		return nil, err
	}
	return &ConnectionInfo{
		ServerAddr: cred.UserName,
		Token:      string(cred.CredentialBlob),
	}, nil
}

func (c *ConnectionListSubCommands) Execute(args []string) error {
	creds, err := wincred.List()
	if err != nil {
		return err
	}

	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"Name", "Server Address", "Last Written"})
	table.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})
	table.SetCenterSeparator("|")
	for _, cred := range creds {
		if strings.Index(cred.TargetName, "fse:") == 0 {
			table.Append([]string{cred.TargetName[4:], cred.UserName, cred.LastWritten.Format(time.RFC822)})
		}
	}
	table.Render()

	return nil
}

func (c *ConnectionAddSubCommands) Execute(args []string) error {
	credName := strings.Trim(c.Name, " \t\r\n")
	if len(credName) == 0 {
		credName = uuid.NewV4().String()
		fmt.Println("connection name not provided, using generated name:", credName)
	}
	cred := wincred.NewGenericCredential("fse:" + credName)
	cred.UserName = c.ServerAddr
	cred.CredentialBlob = []byte(c.Token)
	return cred.Write()
}

func (c *ConnectionRemoveSubCommands) Execute(args []string) error {
	cred, err := wincred.GetGenericCredential("fse:" + c.Name)
	if err != nil {
		return err
	}
	return cred.Delete()
}

func (v *VersionSubCommands) Execute(args []string) error {
	var buf strings.Builder
	buf.WriteRune('[')
	buf.WriteString(c.RedString(name))
	buf.WriteString(c.GreenString(" v%s", version))
	buf.WriteRune('-')
	buf.WriteString(c.GreenString("%s", buildId))
	buf.WriteString("]\n")
	buf.WriteString(description)
	buf.WriteRune('\n')
	buf.WriteString("See: ")
	buf.WriteString(c.New(c.Underline).Sprintf("%s\n", website))
	fmt.Printf(buf.String())
	return nil
}
